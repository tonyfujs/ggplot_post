Dataviz with R
========================================================
author: ggplot2 & the grammar of graphics
transition: rotate
transition-speed: slow
width: 1440
height: 900
incremental: true
date: `r format(Sys.Date(), format="%B %d, %Y")`
css: ./theme/my_style.css

<small> Tony Fujs </small>

```{r setup, echo=FALSE}
library(knitr)
library(highlight)
library(ggplot2)
library(ggthemes)
opts_chunk$set(cache = TRUE, fig.align = 'right')
load('./data/01_gg_theory.Rdata')
```



========================================================
incremental: false

# Dataviz tools?

WHY USE R & ggplot2?
========================================================
* Flexible
* Powerful

WHY USE R & ggplot2?
========================================================
![](./tof/bike_ggplot.png)

WHY USE R & ggplot2?
========================================================
![](./tof/facebook.png)

WHY USE R & ggplot2?
========================================================
![](./tof/h_bullet_chart.png)

WHY USE R & ggplot2?
========================================================
* Flexible
* Powerful
* Scaling

Difference between this plot...
========================================================

![](./tof/simple_map.png)

and this plot?
========================================================

![](./tof/map.png)


ONE LINE OF CODE!!
========================================================

## facet_wrap(~year)

WHY USE R & ggplot2?
========================================================

* Flexible
* Powerful
* Scaling
* Reproducible work

WHY USE R & ggplot2?
========================================================
incremental: false

* Flexible
* Powerful
* Scaling
* Reproducible work
* Building block for other tools (lyra, ggvis, SPSS)


What is ggplot2?
========================================================
* R package (Tool in the R toolbox)
* Rely on the Grammar of Graphics (gg)

***

![](./tof/hadley.png)


Barriers to entry
========================================================
* R: From point & click to writing code
* Learning Grammar of Graphics (gg) - as opposed to typology


Objective of the workshop
========================================================

### Remove those barriers
* Understand the gg framework
* Play with simple code

How do we do it?
========================================================
incremental: false

1. gg theory

***

![](./tof/emmet.jpg)


How do we do it?
========================================================
incremental: false

1. gg theory
2. create simple plots

***

![](./tof/pos_id_bar.png)

How do we do it?
========================================================
incremental: false

1. gg theory
2. create simple plots
3. create complex plot(s)

***

![](./tof/map.png)


Napoleon's Russian Campaign: Original
========================================================

![](./tof/minard_map.png)

Napoleon's Russian Campaign: ggplot2
========================================================

![](./tof/minard_map_gg.png)


Small multiples: Walmart stores
========================================================

![](./tof/map.png)


========================================================
incremental: false
type: practice

PRACTICE TIME!!

![](./tof/height.png)

DRAW A SCATTER PLOT OF THE FOLLOWING DATASET

========================================================
incremental: false
type: practice

PRACTICE TIME!!

![](./tof/height.png)

DESCRIBE THE STEPS YOU TOOK TO DRAW THE PLOT

Scatter plots: STEP 1
========================================================

![](./tof/gg1.png)

Scatter plots: STEP 2
========================================================

![](./tof/gg2.png)

Scatter plots: STEP 3
========================================================

![](./tof/gg3.png)

Scatter plots: STEP 4
========================================================

![](./tof/gg4.png)

Scatter plots: STEP 5
========================================================

![](./tof/gg5.png)


Grammar of graphic summary
========================================================

![](./tof/ggtab1.png)

DATA
====================================


![](./tof/ggtab_data.png)

Data
====================================


```{r, echo = FALSE}
mini_walmart[,1:3]
```

* Code
```{r, eval = FALSE}
data = mini_walmart
```

***

<pre><code class="r">
ggplot() + 
geom_point(
 aes(x = state,y = stores),
 <b>data = mini_walmart</b>)
</code></pre>

AESTHETIC MAPPING
====================================


![](./tof/ggtab_aes.png)

Aesthetics: position
====================================


```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores)
data = mini_walmart
```

***

Aesthetics: position
====================================
incremental: false


```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores)
data = mini_walmart
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
aes_position
```

Aesthetics: color
====================================


```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores,
    color = stores)
data = mini_walmart
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
aes_color_continous
```

Aesthetics: color
====================================


```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores,
    color = state)
data = mini_walmart
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
aes_color_categorical
```

Aesthetics: shape
====================================


```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores,
    shape = state)
data = mini_walmart
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
aes_shape
```

PRACTICE TIME!!
====================================
type: practice

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
#COMPLETE THE CODE TO PRODUCE THIS PLOT
aes(x = state,y = stores)
data = mini_walmart
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
aes_double
```

PRACTICE TIME!!
====================================
type: practice
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
#COMPLETE THE CODE TO PRODUCE THIS PLOT
aes(x = state,y = stores,
    color = state,
    shape = state)
data = mini_walmart
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
aes_double
```

PRACTICE TIME!!
====================================
type: practice

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
# WHAT ADDITIONAL AESTHETIC MAPPING IS NEEDED TO PRODUCE THIS PLOT?
aes(x = state,y = stores)
data = mini_walmart
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
aes_size
```

PRACTICE TIME!!
====================================
type: practice
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
# WHAT ADDITIONAL AESTHETIC MAPPING IS NEEDED TO PRODUCE THIS PLOT?
aes(x = state,y = stores,
    size = stores)
data = mini_walmart
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
aes_size
```

SCALE
====================================


![](./tof/ggtab_scale.png)

Scale: position (default)
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores)
data = mini_walmart
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
scale_y_cont
```

Scale: position (default)
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores)
data = mini_walmart 
scale_y_continuous()
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
scale_y_cont
```


Scale: position (log)
=====================================


```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores)
data = mini_walmart 
scale_y_log10()
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
scale_y_log
```


Scale: color
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores,
    color = stores)
data = mini_walmart 
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
scale_color_blue
```


Scale: color
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores,
    color = stores)
data = mini_walmart
scale_color_continuous()
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
scale_color_blue
```


Scale: color
====================================


```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores,
    color = stores)
data = mini_walmart
scale_color_continuous(
  low = 'light green',
  high = 'dark green')
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
scale_color_green
```


Geometric objects: point
===================================


![](./tof/ggtab_geom.png)


Geometric objects: point
====================================


```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores)
data = mini_walmart
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
geom_point
```


Geometric objects: point
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores)
data = mini_walmart
geom_point()
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
geom_point
```


Geometric objects: bar
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores)
data = mini_walmart
geom_bar()
```

***

TAKE A GUESS:
WHAT WILL THIS PLOT LOOK LIKE?


Geometric objects: bar
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores)
data = mini_walmart
geom_bar()
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
geom_bar
```


PRACTICE TIME!!
====================================
type: practice
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
# COMPLETE THE CODE TO PRODUCE THIS PLOT
aes(x = state,y = stores)
data = mini_walmart
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
geom_line
```


PRACTICE TIME!!
====================================
type: practice
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
# COMPLETE THE CODE TO PRODUCE THIS PLOT
aes(x = state,y = stores)
data = mini_walmart
geom_line()
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
geom_line
```


Geometric objects: text
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores)
data = mini_walmart
geom_text()
```

***

TAKE A GUESS:
WHAT WILL THIS PLOT LOOK LIKE?


Geometric objects: text
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores)
data = mini_walmart
geom_text()
```

***

~~Error: geom_text requires the following missing aesthetics: label~~


Geometric objects: text
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = state,y = stores,
    label = stores)
data = mini_walmart
geom_text()
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
geom_text
```


Position adjustment: identity
====================================


![](./tof/ggtab_pos.png)

Position adjustment: identity
====================================


```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores)
data = mini_walmart
geom_point()
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
pos_id_point
```


Position adjustment: identity
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores)
data = mini_walmart
geom_point()
position = 'identity'
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
pos_id_point
```


Position adjustment: identity
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores)
data = mini_walmart
geom_bar()
position = identity
```

***

TAKE A GUESS: WHAT WILL THIS PLOT LOOK LIKE?


Position adjustment: identity
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores)
data = mini_walmart
geom_bar()
position = identity
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
pos_id_bar
```


Position adjustment: identity
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores,
    fill = state)
data = mini_walmart
geom_bar()
position = identity
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
pos_id_bar2
```


Position adjustment: identity
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores,
    fill = state)
data = mini_walmart
geom_bar()
position = identity
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
pos_id_bar2a
```


Position adjustment: identity
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores,
    fill = state)
data = mini_walmart
geom_bar()
position = identity
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
pos_id_bar2b
```


Position adjustment: identity
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores,
    fill = state)
data = mini_walmart
geom_bar()
position = identity
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
pos_id_bar2c
```


Position adjustment: identity
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores,
    fill = state)
data = mini_walmart
geom_bar()
position = identity
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
pos_id_bar2d
```


Position adjustment: identity
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores,
    fill = state)
data = mini_walmart
geom_bar()
position = identity
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
pos_id_bar2e
```


Position adjustment: dodge
====================================


```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores,
    fill = state)
data = mini_walmart
geom_bar()
position = dodge
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
pos_dodge
```


Position adjustment: stack
====================================


```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores,
    fill = state)
data = mini_walmart
geom_bar()
position = stack
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
pos_stack
```


Position adjustment: fill
====================================


```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores,
    fill = state)
data = mini_walmart
geom_bar()
position = fill
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
pos_fill
```





COORDINATE SYSTEM: cartesian
====================================


![](./tof/ggtab_coord.png)

COORDINATE SYSTEM: cartesian
====================================


```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores,
    fill = state)
data = mini_walmart
geom_bar()
position = fill
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
coord_card
```


COORDINATE SYSTEM: cartesian
====================================


```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores,
    fill = state)
data = mini_walmart
geom_bar()
position = fill
coord_cartesian()
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
coord_card
```


COORDINATE SYSTEM: cartesian
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores,
    fill = state)
data = mini_walmart
geom_bar()
position = fill
coord_polar()
```

***

TAKE A GUESS:
WHAT WILL THIS PLOT LOOK LIKE?


COORDINATE SYSTEM: cartesian
====================================
incremental: false

```{r, echo = FALSE}
mini_walmart[,1:3]
```

```{r, eval = FALSE}
aes(x = year,y = stores,
    fill = state)
data = mini_walmart
geom_bar()
position = fill
coord_polar()
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
coord_polar_y
```

====================================
incremental: false
type: practice

PRACTICE TIME!!

![](./tof/height.png)

ADD A REGRESSION LINE TO YOUR HAND DRAWN SCATTER PLOT

STATISTICAL TRANSFORMATION
====================================


![](./tof/gg7.png)

STATISTICAL TRANSFORMATION
====================================


![](./tof/gg8.png)

STATISTICAL TRANSFORMATION
====================================


![](./tof/gg9.png)

STATISTICAL TRANSFORMATION
====================================


![](./tof/ggtab_stat.png)


STATISTICAL TRANSFORMATION: identity
====================================


```{r, echo = FALSE}
mini_walmart[,c(1:3,5)]
```

```{r, eval = FALSE}
aes(x = stores, y = share)
data = mini_walmart
geom_point()
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
stat_identity_point
```


STATISTICAL TRANSFORMATION: identity
====================================


```{r, echo = FALSE}
mini_walmart[,c(1:3,5)]
```

```{r, eval = FALSE}
aes(x = stores, y = share)
data = mini_walmart
geom_point(stat = 'identity')
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
stat_identity_point
```


STATISTICAL TRANSFORMATION: smooth
====================================


```{r, echo = FALSE}
mini_walmart[,c(1:3,5)]
```

```{r, eval = FALSE}
aes(x = stores, y = share)
data = mini_walmart
geom_point(stat = 'smooth')
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
stat_smooth_point
```


STATISTICAL TRANSFORMATION: smooth
====================================


```{r, echo = FALSE}
mini_walmart[,c(1:3,5)]
```

```{r, eval = FALSE}
aes(x = stores, y = share)
data = mini_walmart
geom_line(stat = 'smooth')
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
stat_smooth_line
```


LAYER
====================================


```{r, echo = FALSE}
mini_walmart[,c(1:3,5)]
```

```{r, eval = FALSE}
aes(x = stores, y = share)
data = mini_walmart
geom_point(stat = 'identity')
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
stat_identity_point
```


LAYER
====================================


```{r, echo = FALSE}
mini_walmart[,c(1:3,5)]
```

```{r, eval = FALSE}
aes(x = stores, y = share)
data = mini_walmart
geom_point(stat = 'identity') +
geom_line(stat = 'smooth')
```

***

```{r, echo = FALSE, out.height = 700, out.width = 700}
stat_smooth_both
```

LAYER
====================================


![](./tof/ggtab_layer.png)